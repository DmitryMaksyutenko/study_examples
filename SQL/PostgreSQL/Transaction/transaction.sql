/*
    A database transaction is a single unit of work which may consist of one or more operations.

    A transaction in PostgreSQL is atomic, consistent, isolated, and durable.
    These properties are often referred to as ACID:

        Atomicity guarantees that the transaction completes in an all-or-nothing manner.

        Consistency ensures the change to data written to the database must be valid
        and follow predefined rules.

        Isolation determines how transaction integrity is visible to other transactions.

        Durability makes sure that transactions which have been committed
        will be stored permanently.

    To start a transaction:
        BEGIN TRANSACTION;
        BEGIN WORK;
        BEGIN

    Commiting a transaction:
        COMMIT WORK;
        COMMIT TRANSACTION;
        COMMIT;

    Rolling back a transaction:
        ROLLBACK WORK;
        ROLLBACK TRANSACTION;
        ROLLBACK;
*/

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
);

DROP TABLE IF EXISTS accounts;

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

-- Explisit transactio.
BEGIN;

INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

COMMIT;


BEGIN;

UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

UPDATE accounts
SET balance = balance + 1000
WHERE id = 2;

COMMIT;


BEGIN;

UPDATE accounts
SET balance = balance + 2000
WHERE id = 2;

ROLLBACK;
